{"version":3,"file":"static/js/341.1fec7d12.chunk.js","mappings":"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","sources":["redux/contact/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Section/Section.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts.items;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;\nexport const getFilter = state => state.contacts.filters;\n","import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/contact/operations';\nimport { getContacts } from 'redux/contact/selectors';\nimport { useSelector } from 'react-redux';\nimport { Input, Box, FormLabel, Button } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    if (e.target.name === 'name') {\n      setName(e.target.value);\n    }\n    if (e.target.name === 'number') {\n      setNumber(e.target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.length > 0) {\n      const contactsInPhonebook = [];\n      contacts.forEach(({ name }) =>\n        contactsInPhonebook.push(name.toLowerCase())\n      );\n      if (contactsInPhonebook.includes(name.toLowerCase())) {\n        alert(`${name} is already in contacts.`);\n        reset();\n        return;\n      }\n    }\n\n    dispatch(addContacts({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box as=\"form\" pl={4} onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </FormLabel>\n      <FormLabel>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </FormLabel>\n      <Button\n        backgroundColor={'green.100'}\n        _hover={{ bg: 'green.200' }}\n        size=\"md\"\n        height=\"48px\"\n        width=\"200px\"\n        border=\"2px\"\n        borderColor=\"green.50\"\n        type=\"submit\"\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contact/operations';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contact/selectors';\nimport { List, ListItem, Flex, IconButton, Text } from '@chakra-ui/react';\n\nimport { AiTwotoneDelete, AiFillPhone } from 'react-icons/ai';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = (contacts, filter) => {\n    if (!filter) return contacts;\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  };\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  const delContact = id => {\n    dispatch(deleteContact(id));\n  };\n  if (visibleContacts.length === 0) return null;\n  return (\n    <>\n      <Flex as={List} flexDirection=\"column\">\n        {visibleContacts.map(({ id, name, number }) => (\n          <Flex\n            as={ListItem}\n            justify=\"center\"\n            alignItems=\"center\"\n            key={id}\n            gap={'5'}\n          >\n            <Text as=\"b\" fontSize=\"2xl\">\n              {name}\n            </Text>\n            <AiFillPhone />\n            <Text as=\"samp\" fontSize=\"xl\">\n              {number}\n            </Text>\n            <IconButton\n              color=\"green.200\"\n              variant=\"outline\"\n              icon={<AiTwotoneDelete />}\n              onClick={() => {\n                delContact(id);\n              }}\n            ></IconButton>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { Heading, Flex } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { getError, getIsLoading } from 'redux/contact/selectors';\nimport { Loader } from '../Loader';\n\nconst Section = ({ header, title, children }) => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  return (\n    <>\n      {' '}\n      {header && (\n        <Flex justifyContent=\"center\">\n          <Heading as=\"h1\">{header}</Heading>\n        </Flex>\n      )}\n      {title &&\n        (isLoading && !error ? (\n          <Flex justifyContent=\"center\">\n            <Loader />\n          </Flex>\n        ) : (\n          <Flex justifyContent=\"center\">\n            <Heading as=\"h2\" size=\"xl\">\n              {title}\n            </Heading>\n          </Flex>\n        ))}\n      {children}\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contact/filterSlice';\nimport { Input, FormLabel, Box } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = e => dispatch(filterContact(e.target.value));\n  return (\n    <Box as=\"form\" colSpan={2} pl={'16px'}>\n      <FormLabel>\n        <Input\n          type=\"name\"\n          required\n          onChange={filter}\n          placeholder=\"Find contact by name\"\n        />\n      </FormLabel>\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Section from 'components/Section/Section';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contact/operations';\nimport { Box, Heading, Flex } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Box>\n        <Box colSpan={2}>\n          <Section header=\"Phonebook\" title=\"\">\n            <ContactForm />\n          </Section>\n        </Box>\n        {contacts.length > 0 ? (\n          <Box>\n            <Section header=\"\" title=\"Contacts\">\n              <Filter />\n              <ContactList />\n            </Section>\n          </Box>\n        ) : (\n          <Box>\n            <Section header=\"\" title=\"Your phonebook is empty.\">\n              <Flex justifyContent=\"center\">\n                <Heading as=\"h3\">Please add contacts.</Heading>\n              </Flex>\n            </Section>\n          </Box>\n        )}\n      </Box>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filters","useSelector","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","as","pl","onSubmit","preventDefault","length","contactsInPhonebook","forEach","push","toLowerCase","includes","alert","addContacts","type","pattern","title","required","onChange","backgroundColor","_hover","bg","size","height","width","border","borderColor","filter","visibleContacts","normalizedFilter","toLocaleLowerCase","contact","getVisibleContacts","List","flexDirection","map","id","ListItem","justify","alignItems","gap","fontSize","color","variant","icon","onClick","deleteContact","delContact","header","children","justifyContent","Loader","colSpan","filterContact","placeholder","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}